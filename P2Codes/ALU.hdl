//Kevin Tang

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	//handle x and y new values
	Mux16(a = x, sel = zx, out = x1); //zero x
	
	Not16(in = x1, out = x1not); //not x
	Mux16(a = x1, b = x1not, sel = nx, out = x2);
	
	Mux16(a = y, sel = zy, out = y1); //zero y

	Not16(in = y1, out = y1not); //not y
	Mux16(a = y1, b = y1not, sel = ny, out = y2);
	
	//f (if f == 1 then output x+1, else x & y);
	Add16(a = x2, b = y2, out = xyadd);
	And16(a = x2, b = y2, out = xyand);
	Mux16(a = xyand, b = xyadd, sel = f, out = preout);
	
	//no, gives 1's compliment of output
	Not16(in = preout, out = NotPreOut);
	Mux16(a = preout, b = NotPreOut, sel = no, out = out, out[15] = ng, out[0..7] = p1, out[8..15] = p2);
	
	//check if it is zero
	Or8Way(in = p1, out = p1or);
	Or8Way(in = p2, out = p2or);
	Or(a = p1or, b = p2or, out = nonzero);
	Not(in = nonzero, out = zr);
	
   
}