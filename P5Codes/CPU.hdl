// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//Get input instruction type
	Not(in = instruction[15], out = Ainstruction);
	Not(in = Ainstruction, out = Cinstruction);
	
	//A-instruction handling
	And(a = Cinstruction, b = instruction[5], out = CSetA); //see if the C-instruction is setting the A register
	Mux16(a = instruction, b = aluOut, sel = CSetA, out = ARegIn); //chooses between alu output and regular a-instruction
	Or(a = Ainstruction, b = CSetA, out = SaveToA); //see if the a register is set by C-instruction or A-instruction
	ARegister(in = ARegIn, load = SaveToA, out = AtoAlu); //set the Aregister
	
	//C-instruction handling (alu output)
	Mux16(a = AtoAlu, b = inM, sel = instruction[12], out = AMToAlu); //a == 0, use A. a == 1, use M (RAM[A])
	And(a = Cinstruction, b = instruction[4], out = CSetD); //see if the C-instruction sets the D value
	DRegister(in = aluOut, load = CSetD, out = DtoAlu); //sets the Dregister
	ALU(x = DtoAlu, y = AMToAlu, zx = instruction[11], nx = instruction[10], zy = instruction[9],
		ny=instruction[8], f=instruction[7], no=instruction[6],out=aluOut, zr = zrOut, ng = ngOut);
		
	//output the info to memory
	And16(a = true, b=AtoAlu, out[0..14]=addressM); //the current address for the aRegister
	And16(a = true, b = aluOut, out = outM); //set outM = aluOut
	And(a = Cinstruction, b = instruction[3], out = writeM); //determines whether or not to write aluOut to RAM[A]

    // calc PCload & PCinc - whether to load PC with A reg
    And(a=zrOut, b=instruction[1], out=jeq);    // is zero and jump if zero
    And(a=ngOut, b=instruction[2], out=jlt);    // is neg and jump if neg
    Or(a=zrOut, b=ngOut, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
    And(a=positive, b=instruction[0], out=jgt); // is pos and jump if pos
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
    And(a=Cinstruction, b=jumpToA, out=PCload); // Only jump if C instruction
    Not(in=PCload, out=PCinc);                  // only inc if not load
    PC(in=AtoAlu, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);	
}